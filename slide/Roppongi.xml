<xml>

<!-- ******** Outline ******** -->

  <page><br/>
    <p align='center'>
      <br/><br/><br/><br/><br/><br/>
      <font face='Times' size='144'><b>Tamacola</b></font>
      <br/><br/><br/>
      <font face='Times' size='48'>で<br/><br/>Smalltalk を作ろう。</font>
      <br/><br/><br/><br/><br/><br/>
      <font size='48'>山宮 隆</font>
    </p>
  </page>

<!-- ******** Introduction ******** -->
  
  <page><br/>
    <p align='center'><font face='Times' size='72'><u>イントロダクション</u></font></p>
    <p align='center'><font face='Times' size='64'><b>
      <br/><br/>
      Tamarin VM × COLA<br/>
      ↓<br/>
      Tamacola<br/>
    </b></font></p>
  </page>

  <page><br/>
    <p><font face='Times' size='64'><u>Tamarin VM</u></font></p>
    <font face='Times' size='36'><br/><br/>
    <ul>
      <li>オープンソース VM (Adobe Virtual Machine 2).<br/></li>
      <li>Adobe Flash Player のエンジン.<br/></li>
      <li>「三百万人以上のプロフェッショナルに使われ、先進国中 99% ものインターネット利用可能なデスクトップや多くのデバイスで利用出来る世界一普及しているプラットフォーム。」</li>
    </ul>
    </font>

  </page>

  <page><br/>
    <p><font face='Times' size='64'><u>COLA</u></font></p>
    <font face='Times' size='48'><br/><br/>
    <ul>
      <li>Scheme 風 lisp 言語<br/></li>
      <li>「意味の鎖」を処理するPEGパーサ</li>
    </ul>
    </font>

  </page>

  <page><br/>
    <p><font face='Times' size='64'><u>Tamacola とは</u></font></p>
    <font face='Times' size='48'><br/><br/>
    <ul>
      <li>コンパクト(一万行以下)。</li>
      <li>Scheme (Lisp) 風自己記述言語。</li>
      <li>べんりな PEG パーサ付き。</li>
      <li>Flash で動きインストール不要。</li>
    </ul>
    </font>
  </page>

  <!-- page>
    <p><font face='Times' size='64'><u>Tamacola に無いもの</u></font></p>
    <font face='Times' size='48'><br/><br/>
      <ul>
        <li>末尾呼び出し最適化</li>
        <li>継続</li>
        <li>平行プログラミング</li>
        <li>可変長引数</li>
      </ul>
    </font>
  </page -->

<!-- ******** PEG in Tamacola ******** -->

  <page><br/>
    <p align='center'><font face='Times' size='72'><u>PEG 入門</u></font></p>
    <font face='Times' size='48'><br/>
<p align='center'>Tamacola で Smalltalk<br/>(のようなもの)を作ろう<br/></p>
      <ul>
        <li>Smalltak 文を Lisp 式に変換。</li>
        <li>さらにバイトコードに変換。</li>
        <li>Flash Player で実行</li>
      </ul>
    </font>
  </page>

  <page><br/>
    <p><font face='Times' size='64'><u>このスライドについて</u></font></p>
    <font face='Times' size='36'><br/>
    Tamacola 製。Smalltalk の Workspace みたいに実行出来る。<br/><br/>
      <ul>
        <li>[Print It] 実行して表示。</li>
        <li>[Do It] 実行だけ。</li>
        <li>[PEG] パーサーを作る。</li>
      </ul>
    </font>
    <br/>
    <font face='Courier New' size='36'>
(+ 3 4)
(print "Hello, World!")
    </font>
  </page>

  <page><br/>
    <p><font face='Times' size='64'><u>ご挨拶</u></font></p>
    <br/><br/>
    <font face='Courier New' size='32'>

greeting = "あさ" -> "お早うございます。"
         | "よる" -> "今晩は"

;; テスト

(parse-collection greeting "あさ")
(parse-collection greeting "よる")
    </font>
  </page>

  <page><br/>
    <p><font face='Times' size='64'><u>コメントと空白</u></font></p>
    <br/>
    <font face='Courier New' size='28'>
space = [ \t\r\n]
cmt   = "\"" (!"\"" .)* "\""
__    = (space | cmt)*

;; テスト
(parse-collection space "  ")
(parse-collection cmt   "\"コメント\"")
(parse-collection __    "  ")
(parse-collection __    "  \"コメント\"  ")
    </font>
  </page>

  <page><br/>
    <p><font face='Times' size='64'><u>数字</u></font></p>
    <br/>
    <font face='Courier New' size='24'>
dig     = [0123456789]
num     = dig+

;; テスト

(parse-collection dig "7")
(parse-collection num "345")

;; 数字を作る

num  = dig+:n __ -> (string->number (->string n))
    </font>
  </page>

  <page><br/>
    <p><font face='Times' size='64'><u>識別子</u></font></p>
    <br/>
    <font face='Courier New' size='28'>
letter = [ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_]
ident  = letter:x (letter | dig)* :xs
       -> (list->string `(,x ,@xs))

;; テスト
(parse-collection ident "SmallTalk")

;; 参考 クアジクォートとは?
(let ((x 'S)
      (xs '(m a l l T a l k)))
      `(,x ,@xs))
    </font>
  </page>

  <page><br/>
    <p><font face='Times' size='64'><u>文字列</u></font></p>
    <br/>
    <font face='Courier New' size='28'>
string-body   = (!"'" . | "''" )*:xs
              -> (list->string (->list xs))
quoted-string = "'" string-body:x "'" __ 
              -> x

;; テスト
(parse-collection string-body "なんとか")
(parse-collection string-body "''これはok")

(parse-collection quoted-string "''")
(parse-collection quoted-string "'hello'")
(parse-collection quoted-string "'''hello'''")
    </font>
  </page>

  <page><br/>
    <p><font face='Times' size='64'><u>シンボル</u></font></p>
    <br/>
    <font face='Courier New' size='28'>
#symbol を (quote symbol) に変換する。

sym = "#" ident:x __
    -> `(quote ,(string->symbol x))

;; テスト
(parse-collection sym "#hello")
    </font>
  </page>

  <page><br/>
    <p><font face='Times' size='64'><u>変数</u></font></p>
    <br/>
    <font face='Courier New' size='28'>
reserved = "true"  __ -> '#t
         | "false" __ -> '#f
         | "self"  __ -> '#self
variable = ident:x __ -> (string->symbol x)

;; テスト
(parse-collection reserved "true")
(parse-collection reserved "false")
(parse-collection reserved "self")
(parse-collection variable "someThing")
    </font>
  </page>

  <page><br/>
    <p><font face='Times' size='64'><u>括弧</u></font></p>
    <br/>
    <font face='Courier New' size='28'>
unit = num
     | reserved
     | variable
     | sym
     | quoted-string
     | "(" __ stmt :x ")" __ -> x
     | block
stmt = unit

;; テスト
(parse-collection unit "345")
(parse-collection unit "self")
(parse-collection unit "'六本木'")
(parse-collection unit "('六本木')")
    </font>
  </page>

  <page><br/>
    <p><font face='Times' size='64'><u>単項メッセージ</u></font></p>
    <br/>
    <font face='Courier New' size='24'>
unary      = unit:x unary-rest*:ms
           -> (fold-left
                (lambda (r m)
                  `(send ,r ,(string->symbol m)))
                x
                (->list ms))
unary-rest = ident:m !":" __
           -> m
stmt       = unary

;; テスト
(parse-collection unary "345 foo")
(parse-collection unary "345 foo bar")
(parse-collection unary "345")
    </font>
  </page>

  <page><br/>
    <p><font face='Times' size='64'><u>二項メッセージ</u></font></p>
    <br/>
    <font face='Courier New' size='20'>
binary      = unary:x ( binary-rest+ :ms
            -> (fold-left
                 (lambda (r m) `(,(car m) ,r ,(cadr m)))
                   x
                   (->list ms))
            | -> x ) 

binop       = [!%&amp;*+,/&lt;=&gt;?@\~|-]
binary-rest = binop:op __ unary:x
            -> `(,(string->symbol (char->string op)) ,x)
stmt       = binary

;; テスト
(parse-collection binary-rest "+ 4")
(parse-collection binary "3 + 4")
(parse-collection binary "3 + 4 * 5")
(parse-collection binary "3 + (4 * 5)")
(parse-collection binary "3 foo * 5")
    </font>
  </page>

  <page><br/>
    <p><font face='Times' size='64'><u>キーワードメッセージ</u></font></p>
    <br/>
    <font face='Courier New' size='18'>
keyword      = binary:x ( keyword-rest:m
             -> `(send ,x ,(string->symbol (car m)) ,@(cdr m))
             | -> x )

keyword-rest = keyword-part+:xs
             -> (fold-right
                  (lambda (e result)
                    (let ((word (+ (car e) ":"))
                          (arg  (cdr e)))
                          (cons (+ word (car result))
                         (cons arg (cdr result)))))
                  (cons "" ())
                  (->list xs))
keyword-part = ident:m ":" __ binary:x      -> (cons m x)
stmt         = keyword

;; テスト
(parse-collection keyword-part "first: 1")
(parse-collection keyword-rest "first: 1 second: 2")
(parse-collection keyword "1 first: 2")
(parse-collection keyword "1 first: 2 second: 3")
    </font>
  </page>

  <page><br/>
    <p><font face='Times' size='64'><u>代入</u></font></p>
    <br/>
    <font face='Courier New' size='28'>
assign = ident:v __ ":=" __ stmt:x
       -> `(set! ,(string->symbol v) ,x)

;; テスト
(parse-collection assign "a := 1")
(parse-collection assign "a := 3 + 4 foo: 5")
    </font>
  </page>

  <page><br/>
    <p><font face='Times' size='64'><u>ブロック</u></font></p>
    <br/>
    <font face='Courier New' size='18'>
args   = (":" variable)+:xs  "|" __ -> (->list xs)
       |                            -> ()

tmps   = "|" __ variable*:xs "|" __ -> (->list xs)
       |                            -> ()

stmts  = stmt:x ("." __ stmt)*:xs   -> `(,x ,@xs)
       |                            -> ()

block  = "[" __ args:as tmps:ts stmts:es "]" __
       -> `(lambda ,as (let ,ts ,@es))

stmt   = assign | keyword
_stmts = __ stmts

;; テスト
(parse-collection args ":a :b |")
(parse-collection tmps "| a b |")
(parse-collection stmts "1. 2. 3")
(parse-collection block "[ :arg | | t1 t2  | some message: 7 ]")
    </font>
  </page>

  <page><br/>
    <p><font face='Times' size='64'><u>実行エンジン</u></font></p>
    <br/>
    <font face='Courier New' size='24'>
(define st/compile
  (lambda (str) (parse-collection _stmts str)))

(define st/eval
  (lambda (str)
    (eval `(print ,@(st/compile str)))))

;; テスト
(st/compile "3 + 4")
(st/eval "3 + 4")



ここに謎の [ST] ボタンがある。---------------↓
    </font>
  </page>

  <page><br/>
    <p><font face='Times' size='64'><u>ランタイムライブラリ</u></font></p>
    <br/>
    <font face='Courier New' size='24'>
<!-- (slot-setq! (slot-getq Function prototype) value
            (lambda (a1) (#self)))
[3 + 4] value.

(slot-setq! (slot-getq Function prototype) value:
            (lambda (a1) (#self a1)))
[ :x | x + x ] value: 10.

(slot-setq! (slot-getq Object prototype) at:
            (lambda (key) (slot-get #self key)))
'スモールトーク' at: #length.
 -->
(slot-setq! (slot-getq Boolean prototype)
            ifTrue:ifFalse:
            (lambda (a b) (if #self (a) (b))))

(1 &gt; 0) ifTrue: ['真'] ifFalse: ['偽'].
<!--
(slot-setq! (slot-getq Object prototype) println
            (lambda () (println #self)))
'Hello, World!' println.
-->
    </font>
  </page>

  <page><br/>
    <p><font face='Times' size='64'><u>メソッド定義</u></font></p>
    <br/>
    <font face='Courier New' size='20'>
            
(slot-setq! (slot-getq Object prototype) methodAt:put:
  (lambda (method block)
    (slot-set! (slot-getq #self prototype) method block)))

Number methodAt: #fib put:
[
  | i |
  i := self.
  (i &lt; 2) ifTrue: [1]
             ifFalse: [ (i - 1) fib + (i - 2) fib]
]

1 fib.
2 fib.
3 fib.
4 fib.
10 fib.

    </font>
  </page>


  <!-- page>
    <p><font face='Times' size='64'><u>Code size</u></font></p>
    <br/>
    <p align='center'><img src='loc.png' align='center'/></p>
  </page>

  <page><br/>
    <p><font face='Times' size='64'><u>Benchmarks</u></font></p>
    <br/>
    <img src='benchmarks.png'/>
    <br/><br/><br/><br/><br/><br/>
    
    <font face='Times' size='24'>
      (Small number is faster)
    </font>
    <font face='Times' size='24'>
      <br/>
      <ul>
        <li>Fibonacci: The first 36 Fibonacci numbers recursively.<br/></li>
        <li>Sieve: The prime numbers up to 8,190 in the Eratosthenes Sieve algorithm, repeats it 3,000 times.<br/></li>
        <li>Sieve with Vector: uses Vector instead of Array to see the impact of parametric types.<br/></li>
      </ul>
    </font>
  </page-->

<!-- ******** Conclusions ******** -->

<page><br/>
    <p align='center'><font face='Times' size='72'><u>まとめ</u></font></p>
    <font face='Times' size='36'>
      <br/>
      <br/><br/>
      <ul>
        <li>Smalltalk のような物を作ってみました。</li>
        <li>Tamacola は 言語を作るためのツール。</li>
        <li>Flash 上で動きます。</li>
        <li>ブラウザ的な物はまだありません。</li>
      </ul>
    </font>
  </page>
</xml>
