Object subclass: #AVMLogNode	instanceVariableNames: 'enter count leave callee calleeAddr caller callerAddr children parent'	classVariableNames: ''	poolDictionaries: ''	category: 'AVM-Log'!!AVMLogNode methodsFor: 'accessing' stamp: 'yo 5/11/2010 14:41'!callee	"Answer the value of callee"	^ callee! !!AVMLogNode methodsFor: 'accessing' stamp: 'yo 5/11/2010 14:41'!calleeAddr	"Answer the value of calleeAddr"	^ calleeAddr! !!AVMLogNode methodsFor: 'accessing' stamp: 'yo 5/11/2010 14:41'!calleeAddr: anObject	"Set the value of calleeAddr"	calleeAddr := anObject! !!AVMLogNode methodsFor: 'accessing' stamp: 'yo 5/11/2010 14:41'!callee: anObject	"Set the value of callee"	callee := anObject! !!AVMLogNode methodsFor: 'accessing' stamp: 'yo 5/11/2010 14:41'!caller	"Answer the value of caller"	^ caller! !!AVMLogNode methodsFor: 'accessing' stamp: 'yo 5/11/2010 14:41'!callerAddr	"Answer the value of callerAddr"	^ callerAddr! !!AVMLogNode methodsFor: 'accessing' stamp: 'yo 5/11/2010 14:41'!callerAddr: anObject	"Set the value of callerAddr"	callerAddr := anObject! !!AVMLogNode methodsFor: 'accessing' stamp: 'yo 5/11/2010 14:41'!caller: anObject	"Set the value of caller"	caller := anObject! !!AVMLogNode methodsFor: 'accessing' stamp: 'yo 5/11/2010 14:41'!children	"Answer the value of children"	^ children! !!AVMLogNode methodsFor: 'accessing' stamp: 'yo 5/11/2010 14:41'!children: anObject	"Set the value of children"	children := anObject! !!AVMLogNode methodsFor: 'accessing' stamp: 'yo 5/11/2010 14:41'!count	"Answer the value of count"	^ count! !!AVMLogNode methodsFor: 'accessing' stamp: 'yo 5/11/2010 14:41'!count: anObject	"Set the value of count"	count := anObject! !!AVMLogNode methodsFor: 'accessing' stamp: 'yo 5/11/2010 14:41'!enter	"Answer the value of enter"	^ enter! !!AVMLogNode methodsFor: 'accessing' stamp: 'yo 5/11/2010 14:41'!enter: anObject	"Set the value of enter"	enter := anObject! !!AVMLogNode methodsFor: 'accessing' stamp: 'yo 5/11/2010 14:47'!leave	"Answer the value of leave"	^ leave! !!AVMLogNode methodsFor: 'accessing' stamp: 'yo 5/11/2010 14:47'!leave: anObject	"Set the value of leave"	leave := anObject! !!AVMLogNode methodsFor: 'accessing' stamp: 'yo 5/11/2010 14:41'!parent	"Answer the value of parent"	^ parent! !!AVMLogNode methodsFor: 'accessing' stamp: 'yo 5/11/2010 14:41'!parent: anObject	"Set the value of parent"	parent := anObject! !OMeta2 subclass: #AVMLogScanner	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'AVM-Log'!!AVMLogScanner methodsFor: 'as yet unclassified' stamp: 'yo 5/11/2010 14:01'!hex =	anything:c ?['0123456789ABCDEF' includes: c] [c]! !!AVMLogScanner methodsFor: 'as yet unclassified' stamp: 'yo 5/11/2010 23:10'!line =	<digit+>:time `` AVMINF: MTHD '' <(~&(`` ()'') anything)+>:callee `` () @ 0x'' <hex+>:calleeAddr  (``, '' <(~&(`` @ '') anything)+>:caller `` @ 0x'' <hex+>:callerAddr		| ['']:caller ['00000000']:callerAddr)  -> [{time. callee. calleeAddr. caller. callerAddr}]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AVMLogScanner class	instanceVariableNames: ''!!AVMLogScanner class methodsFor: 'as yet unclassified' stamp: 'yo 5/11/2010 16:59'!leavesFrom: node into: aDictionary	node children do: [: c |		self leavesFrom: c into: aDictionary	].	aDictionary at: node callee ifAbsentPut: [0].	aDictionary at: node callee put: (aDictionary at: node callee) +node count.	^ aDictionary.! !!AVMLogScanner class methodsFor: 'as yet unclassified' stamp: 'yo 5/11/2010 16:32'!printTree: node indent: i on: aStream	i timesRepeat: [aStream space; space].	aStream nextPutAll: (node leave - node enter) printString; space; nextPutAll: node count printString; space; nextPutAll: node callee; cr.	node children do: [:c |		self printTree: c indent: i + 1 on: aStream].! !!AVMLogScanner class methodsFor: 'as yet unclassified' stamp: 'yo 5/12/2010 00:11'!readFrom: aStream	| currentNode tree ret time callee calleeAddr caller callerAddr oldCurrent popTarget found string totalSize firstTime |	currentNode := AVMLogNode new		enter: 0; callee: '';  count: 0; leave: 0; calleeAddr: '00000000'; caller: ''; callerAddr: '00000000'; children: OrderedCollection new; parent: nil.	tree := currentNode.	string := aStream binary contentsOfEntireFile asString.	totalSize := 0.	firstTime := true.	'processing ' displayProgressAt: Display center from: 0 to: string size during: [:bar |		string linesDo: [:line |			bar value: (totalSize := totalSize + line size).			line := line withBlanksTrimmed.			ret := [self read: line] on: Error do: [:ex | nil]. "matchAll: line with: #line".			ret ifNotNil: [				time := ret first.				firstTime ifTrue: [currentNode enter: time. firstTime := false].				callee := ret second.				calleeAddr := ret third.				caller := ret fourth.				callerAddr := ret fifth.				oldCurrent := nil.				popTarget := currentNode.				[popTarget notNil and: [caller ~= popTarget callee or: [callerAddr ~= popTarget calleeAddr]]] whileTrue: [					oldCurrent ifNotNil: [oldCurrent leave: oldCurrent leave + time].					oldCurrent := popTarget.					popTarget := popTarget parent].				oldCurrent ifNotNil: [oldCurrent leave: oldCurrent leave + time].				popTarget ifNil: [popTarget := tree].				found := popTarget children detect: [:e | e callee = callee and: [e calleeAddr = calleeAddr]] ifNone: [].				found ifNotNil: [					found count: found count + 1.					found enter: found enter + time.					currentNode := found.				] ifNil:[					currentNode := AVMLogNode new						enter: time; count: 1; leave: 0; callee: callee; calleeAddr: calleeAddr; caller: caller; callerAddr: callerAddr; children: OrderedCollection new; parent: popTarget.					popTarget children add: currentNode]]]].	[currentNode notNil] whileTrue: [		currentNode leave: currentNode leave + time.		currentNode := currentNode parent].	tree leave: time.	^ tree					! !!AVMLogScanner class methodsFor: 'as yet unclassified' stamp: 'yo 5/12/2010 00:15'!read: line"From the modified AVM2 vm with a command line like:../tamarin/tamarin-central/objdir-debug/shell/avmshell -d -Dastrace 1 bin/abc-cc.swf -- -x example/3plus4.k >astrace4.log	AVMLogScanner read: '21 AVMINF: MTHD Function$cinit () @ 0x0012F478'.	AVMLogScanner read: '21 AVMINF: MTHD Class/get prototype () @ 0x0012F28C, Function$cinit @ 0x0012F478'.	AVMLogScanner read: '22 AVMINF: MTHD Class/get prototype () @ 0x0012F2CC, Namespace$cinit @ 0x0012F478'.	AVMLogScanner read: '32 AVMINF: MTHD Vector.<*>$cinit () @ 0x0012F478'.	AVMLogScanner read: '32 AVMINF: MTHD Class/get prototype () @ 0x0012F2CC, Vector.<*>$cinit @ 0x0012F478'."	| ind ind2 ind3 caller callerAddr |	ind := line findString: 'AVMINF:' startingAt: 1.	ind = 0 ifTrue: [^ nil].	ind2 := line indexOf: $@ startingAt: 1.	ind3 := line indexOf: $@ startingAt: ind2 + 1.	ind3 > 0 ifTrue: [		caller := line copyFrom: ind2 + 14 to: ind3 - 2.		callerAddr := line copyFrom: ind3 + 4 to: line size]	ifFalse: [		caller := ''.		callerAddr := '00000000'].	^ {Number readFrom: (line copyFrom: 1 to: ind - 2).		line copyFrom: ind + 13 to: ind2 - 5.		line copyFrom: ind2 + 4 to: ind2 + 11.		caller. callerAddr}! !